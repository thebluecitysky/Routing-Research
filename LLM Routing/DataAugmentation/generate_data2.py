import spacy
from collections import defaultdict
import pandas as pd
from run_deepseek32b import deepseek_generate

def routing_decision(score):
    """根据评分进行路由决策"""
    return "strong_model" if score < 4 else "weak_model"


# 初始化NLP模型
nlp = spacy.load("en_core_web_sm")

def extract_entities(prompt):
    """使用spacy提取核心实体"""
    doc = nlp(prompt)
    return [ent.text for ent in doc.ents if ent.label_ in ['GPE', 'LOC', 'ORG', 'PERSON']]

import requests

def query_conceptnet(entity):
    """查询ConceptNet获取关联实体"""
    url = f"http://api.conceptnet.io/query?node=/c/en/{entity}&limit=10"
    response = requests.get(url).json()
    
    related = []
    for edge in response['edges']:
        end = edge['end']['label'].lower()
        if end != entity.lower():
            related.append((end, edge['rel']['label']))
    return list(set(related))[:5]  # 取前5个不重复关联

from transformers import AutoModelForCausalLM, AutoTokenizer

model_name = "mistralai/Mixtral-8x7B-Instruct-v0.1"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

def enhance_prompt(original, entities):
    """构建增强查询模板"""
    return f"{original} 请结合以下概念进行详细解释：{', '.join(entities)}"

def generate_response(prompt):
    """使用Mixtral生成回答"""
    inputs = tokenizer(prompt, return_tensors="pt")
    outputs = model.generate(**inputs, max_length=512)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

def knowledge_graph_augmentation(df, threshold=3):

    instruct_prompt = """
    You are tasked with evaluating the quality of responses generated by two models—a smaller model and a larger model—for a given question \( q \). 
    The smaller model's response is \( \text{response\_a} \), and the larger model's response is \( \text{response\_b} \). 
    Based on the quality of the responses, assign a score between 1 and 5, where:
    - **1-3**: The response quality is not good enough, and the question is better suited for the smaller (weaker) model.
    - **4-5**: The response quality is good, and the question is better suited for the larger (stronger) model.
    Your task is to determine whether the question \( q \) is better suited for the smaller model or the larger model based on the response quality. Only generate a single numerical score between 1 and 5. Do not provide any additional explanation or context.
    **Output Format:**  
    A single integer between 1 and 5.  
    **Example:**  
    If the response quality is good and the question is better suited for the larger model, output:  
    `5`  
    If the response quality is not good enough and the question is better suited for the smaller model, output:  
    `2`  
    **Your Output:**  
    `[Your score here]`
    """
        
    
    expanded_data = []
    for _, row in df.iterrows():
        # 实体提取
        entities = extract_entities(row['prompt'])
        if not entities:
            continue
            
        # 知识图谱查询
        all_related = []
        for ent in entities:
            all_related += [r[0] for r in query_conceptnet(ent)]
        
        # 生成增强提示
        enhanced_prompt = enhance_prompt(row['prompt'], list(set(all_related)))
        
        # 小模型生成回答
        small_llm_a = generate_response(enhanced_prompt)
        # deepseek标注
        large_llm_a = deepseek_generate(enhanced_prompt)

        score = deepseek_generate(
            instruct_prompt.replace('{response\_a}', small_llm_a).replace('{response\_b}', large_llm_a).replace('\( q \)', q_prime)
            )
        if int(score) > threshold:
            winner = 'a'
        elif int(score) == threshold:
            winner == "tie"
        else:
            winner = 'b'

        # 构造新数据行
        new_row = {
            "id": len(expanded_data) + 1,  # 生成唯一 ID
            "model_a": 'Mixtral-8x7B',
            "model_b": "deepseek-32b",
            "prompt": enhanced_prompt,
            "response_a": small_llm_a,
            "response_b": large_llm_a,
            "winner_model_a": 1 if winner == "a" else 0,
            "winner_model_b": 1 if winner == "b" else 0,
            "winner_tie": 1 if winner == "tie" else 0,
            "score": int(score)
        }
        
        # 添加到扩充数据集中
        expanded_data.append(new_row)
    
    return pd.DataFrame(expanded_data)

